{
	// This file should be current for the latest revision of the ISO C standard
	// as of this writing (late 2004 -- C99).  If one chooses to be pedantic,
	// this might be further broken out into a "base C" file with different
	// "subclass" syntaxes for C90 and C99. C++ would then inherit from the "base C"
	// syntax, which would avoid the C99 non-C++ keywords. But this seems more
	// pragmatic. -- chris.
	
	name = "C";
	keyEquivalent = "~^C";
	scopeName = "source.c";
	fileTypes = ( c, h );
	foldingStartMarker = "(/\\*\\*|\\{\\s*$)";
	foldingStopMarker = "(\\*\\*/|^\\s*\\})";
	patterns = (
		{ name = "comment.block.c"; begin = "/\\*"; end = "\\*/"; },
		{ name = "comment.line.c++"; begin = "//"; end = "$"; swallow = "\\\\\\s*\\n"; },
		{ name = "keyword.control.c"; match = "\\b(break|case|continue|default|do|else|for|goto|if|inline|_Pragma|return|sizeof|switch|while)\\b"; },
		{ name = "keyword.storage.c"; match = "\\b(asm|__asm__|auto|_Bool|char|_Complex|const|double|enum|extern|float|_Imaginary|int|long|register|restrict|short|signed|static|struct|typedef|union|unsigned|void|volatile|NULL|true|false|TRUE|FALSE)\\b"; },
		{ name = "constant.numeric.c"; match = "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b";},
		{ name = "string.double-quoted.c"; begin = "\""; end = "\""; swallow = "\\\\."; },
		{ name = "string.single-quoted.c"; begin = "'"; end = "'"; swallow = "\\\\."; },
		{ name = "keyword.preprocessor.c";
		  match = "^\\s*#\\s*(define|defined|else|elif|endif|error|if|ifdef|ifndef|line|pragma|undef|warning)\\b";
			captures = { 1 = { name = "directive"; }; };
		},
		{ name = "keyword.preprocessor.c.includes";
		    begin = "^\\s*#\\s*(include|import)\\b\\s+";
		    end = "$";
			captures = { 1 = { name = "directive"; }; };
		},
		
		
		{   name = "declaration.section";
    		match = "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))";
			captures = { 1 = { name = "keyword.preprocessor.c"; };
            			 2 = { name = "directive"; };
            			 3 = { name = "entity.name.section"; };
			 };
		},
		
		// This is a horrible hack. It doesn't work for functions with names smaller than four characters.
		// Comments in the wrong place, though legal C, can fool it.
		// Some function calls can fool it.
		// Various C++ constructs can fool it.
		// Macros can easily fool it. Macros can easily fool most parsers, though.
/*		{ name = "declaration.function.c";
//		    match = "(?!\\b(?:if|do|while|switch|for)\\b)([A-Za-z][A-Za-z0-9:]{4,})\\s*\\(.*?\\)(?!\\s*[;,\\(])";
            match = "(?!\\b(?:if|do|while|switch|for)\\b)([A-Za-z][A-Za-z0-9:]{4,})\\s*\\((?=.*\\)\\s*($|\\{))";
		    captures = { 1 = { name = "name"; }; };
		},
*/	);
	uuid = "25066DC2-6B1D-11D9-9D5B-000D93589AF6";
}
